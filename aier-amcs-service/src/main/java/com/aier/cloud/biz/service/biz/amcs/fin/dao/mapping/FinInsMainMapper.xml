<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aier.cloud.biz.service.biz.amcs.fin.dao.FinInsMainMapper">
  <resultMap id="BaseResultMap" type="com.aier.cloud.biz.service.biz.amcs.fin.entity.FinInsMain">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jan 23 16:34:04 CST 2018.
    --> 
    <id column="ID" jdbcType="DECIMAL" property="id" />
	<result column="MONTH_ID" jdbcType="DECIMAL" property="monthId" />
	<result column="INSURANCE_BAD_DEBT_CAUSE" jdbcType="VARCHAR" property="insuranceBadDebtCause" />
	<result column="CHARITY_BAD_DEBT_AMT" jdbcType="DECIMAL" property="charityBadDebtAmt" />
	<result column="CHARITY_BAD_DEBT_CAUSE" jdbcType="VARCHAR" property="charityBadDebtCause" />
	<result column="PENALTY_DEDUCTION_AMOUNT" jdbcType="DECIMAL" property="penaltyDeductionAmount" />
	<result column="PENALTY_FEE_AMOUNT" jdbcType="DECIMAL" property="penaltyFeeAmount" />
	<result column="HOSP_SETTLEMENT_POLICY" jdbcType="VARCHAR" property="hospSettlementPolicy" />
	<result column="AGREEMENT_RESERVE_RATIO" jdbcType="DECIMAL" property="agreementReserveRatio" />
	<result column="SELF_PAYMENT_RATE" jdbcType="DECIMAL" property="selfPaymentRate" />
	<result column="REASONS_FOR_EXCEEDING" jdbcType="VARCHAR" property="reasonsForExceeding" />
	<result column="DESIGNATED_SERVICE_AGREEMENT" jdbcType="VARCHAR" property="designatedServiceAgreement" />
	<result column="IS_AGREEMENT" jdbcType="DECIMAL" property="isAgreement" />
	<result column="UNFILED_AGREEMENT_REASONS" jdbcType="VARCHAR" property="unfiledAgreementReasons" />
	<result column="EXISTENCE_AGREED_STANDARDS" jdbcType="DECIMAL" property="existenceAgreedStandards" />
	<result column="DAY_SURGERY_IN_HOSPITAL" jdbcType="VARCHAR" property="daySurgeryInHospital" />
	<result column="DAY_SURGERY_SETTLEMENT_POLICY" jdbcType="VARCHAR" property="daySurgerySettlementPolicy" />
	<result column="OUTP_UNIFIED_SETTLEMENT_POLICY" jdbcType="VARCHAR" property="outpUnifiedSettlementPolicy" />
	<result column="SPECIAL_SETTLEMENT_POLICY" jdbcType="VARCHAR" property="specialSettlementPolicy" />
	<result column="OTHER_ISSUES" jdbcType="VARCHAR" property="otherIssues" />
	<result column="CREATOR" jdbcType="DECIMAL" property="creator" />
	<result column="CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
	<result column="MODIFER" jdbcType="DECIMAL" property="modifer" />
	<result column="MODIFY_DATE" jdbcType="TIMESTAMP" property="modifyDate" />
	<result column="HOSP_ID" jdbcType="DECIMAL" property="hospId" />
	<result column="POOLING_AREA" jdbcType="VARCHAR" property="poolingArea" />
	<result column="INSURANCE_TYPE" jdbcType="DECIMAL" property="insuranceType" />
	<result column="HEALTH_COMMISSION_LEVEL" jdbcType="DECIMAL" property="healthCommissionLevel" />
	<result column="INSURANCE_SETTLEMENT_LEVEL" jdbcType="DECIMAL" property="insuranceSettlementLevel" />
	<result column="RECEIVABLE_BALANCE_END_PERIOD" jdbcType="DECIMAL" property="receivableBalanceEndPeriod" />
	<result column="RECEIVABLE_COLLECTION_RATE" jdbcType="DECIMAL" property="receivableCollectionRate" />
	<result column="INSURANCE_BAD_DEBT_AMT" jdbcType="DECIMAL" property="insuranceBadDebtAmt" />
	  <result column="PERIOD" jdbcType="DECIMAL" property="period" />
  </resultMap>
  <sql id="BaseColumnList">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jan 23 16:34:04 CST 2018.
    -->
	MONTH_ID, INSURANCE_BAD_DEBT_CAUSE, CHARITY_BAD_DEBT_AMT, CHARITY_BAD_DEBT_CAUSE, PENALTY_DEDUCTION_AMOUNT, PENALTY_FEE_AMOUNT, 	
	HOSP_SETTLEMENT_POLICY, AGREEMENT_RESERVE_RATIO, SELF_PAYMENT_RATE, REASONS_FOR_EXCEEDING, DESIGNATED_SERVICE_AGREEMENT, IS_AGREEMENT, 	
	UNFILED_AGREEMENT_REASONS, EXISTENCE_AGREED_STANDARDS, DAY_SURGERY_IN_HOSPITAL, DAY_SURGERY_SETTLEMENT_POLICY, OUTP_UNIFIED_SETTLEMENT_POLICY, SPECIAL_SETTLEMENT_POLICY, 	
	OTHER_ISSUES, CREATOR, CREATE_DATE, MODIFER, MODIFY_DATE, HOSP_ID, 	
	POOLING_AREA, INSURANCE_TYPE, ID, HEALTH_COMMISSION_LEVEL, INSURANCE_SETTLEMENT_LEVEL, RECEIVABLE_BALANCE_END_PERIOD, 	
	RECEIVABLE_COLLECTION_RATE, INSURANCE_BAD_DEBT_AMT ,PERIOD
  </sql>
	<sql id="sql_where">
		<trim prefix="WHERE" prefixOverrides="AND | OR">
			<if test="cond.hospId != null and cond.hospId>0">
				and t.HOSP_ID = #{cond.hospId}
			</if>
			<if test="cond.monthId != null and cond.monthId>0">
				and t.MONTH_ID = #{cond.monthId}
			</if>

		</trim>
	</sql>
	<select id="getList" resultType="Map">
		select * from T_FIN_INS_MAIN t
		<include refid="sql_where"/>
	</select>
	<select id="lastList" resultType="Map">
		select t.id,t.CREATE_DATE,t.POOLING_AREA,t.INSURANCE_TYPE,t.INSURANCE_SETTLEMENT_LEVEL,t.HEALTH_COMMISSION_LEVEL
		from T_FIN_INS_MAIN t inner join (SELECT POOLING_AREA,INSURANCE_TYPE,max(CREATE_DATE) AS max_date
			FROM T_FIN_INS_MAIN
			where HOSP_ID=#{hospId}
-- 			and  TO_CHAR(CREATE_DATE, 'YYYY-MM') != TO_CHAR(SYSDATE, 'YYYY-MM')
			and HEALTH_COMMISSION_LEVEL is not null
			GROUP BY POOLING_AREA,INSURANCE_TYPE) sub
		    on t.POOLING_AREA=sub.POOLING_AREA and t.INSURANCE_TYPE=sub.INSURANCE_TYPE and t.CREATE_DATE=sub.max_date
		where t.HOSP_ID=#{hospId}
	</select>
	<select id="queryListByCond" resultType="Map">
		select t.*,
		t6.total_indicator "proj_total_indicator",
		t6.actual_used_amount "proj_actual_used_amount",
		t6.exceed_reason "proj_exceed_reason",
		t6.rectification_measures "proj_rectification_measures",
		t6.feedback_to_management "proj_feedback_to_management",
		t5.rectification_measures "adv_rectification_measures",
		t5.feedback_to_management "adv_feedback_to_management",
		t2.rectification_measures "dip_rectification_measures",
		t2.feedback_to_management "dip_feedback_to_management",
		t3.rectification_measures "drg_rectification_measures",
		t3.feedback_to_management "drg_feedback_to_management",
		t1.BALANCE_OR_DEFICIT_AMOUNT "sgl_Balance_Or_Deficit_Amount",
		t2.BALANCE_OR_OVERSPEND "dip_Balance_Or_Overspend",
		t3.BALANCE_OR_OVERSPEND "drg_Balance_Or_Overspend",
		t4.BALANCE_OR_DEFICIT_AMOUNT "per_Balance_Or_Deficit_Amount",
		t5.TOTAL_AMOUNT-t5.ACTUAL_MEDICAL_INSURANCE_TOTAL "total_Balance_Or_Overspend",
		tm.STATUS
		from T_FIN_INS_MAIN t
		left JOIN T_FIN_INS_SINGLE_DISEASE t1 on t1.MAIN_ID=t.id
		left JOIN T_FIN_INS_ADVANCE_TOTAL t5 on t5.MAIN_ID=t.id
		left JOIN T_FIN_INS_PROJECT_PAY t6 on t6.MAIN_ID=t.id
		left join T_FIN_INS_MONTH tm on tm.ID=t.MONTH_ID
		<choose>
			<when test="cond.dipBo != null and cond.dipBo.intValue()  == 1 ">
				left JOIN T_FIN_INS_DIP_PAY t2 on t2.MAIN_ID=t.id and t2.BALANCE_OR_OVERSPEND &gt;= 0
			</when>
			<when test="cond.dipBo != null and cond.dipBo.intValue()  == 2 ">
				left JOIN T_FIN_INS_DIP_PAY t2 on t2.MAIN_ID=t.id and t2.BALANCE_OR_OVERSPEND &lt; 0
			</when>
			<otherwise>
				left JOIN T_FIN_INS_DIP_PAY t2 on t2.MAIN_ID=t.id
			</otherwise>
		</choose>
		<choose>
			<when test="cond.drgBo != null and cond.drgBo.intValue()  == 1 ">
				left JOIN T_FIN_INS_DRG_PAY t3 on t3.MAIN_ID=t.id and t3.BALANCE_OR_OVERSPEND &gt;= 0
			</when>
			<when test="cond.drgBo != null and cond.drgBo.intValue()  == 2 ">
				left JOIN T_FIN_INS_DRG_PAY t3 on t3.MAIN_ID=t.id and t3.BALANCE_OR_OVERSPEND &lt; 0
			</when>
			<otherwise>
				left JOIN T_FIN_INS_DRG_PAY t3 on t3.MAIN_ID=t.id
			</otherwise>
		</choose>
		<choose>
			<when test="cond.perBo != null and cond.perBo.intValue()  == 1 ">
				left JOIN T_FIN_INS_PERTIME_PAY t4 on t4.MAIN_ID=t.id and t4.BALANCE_OR_DEFICIT_AMOUNT &gt;= 0
			</when>
			<when test="cond.perBo != null and cond.perBo.intValue()  == 2 ">
				left JOIN T_FIN_INS_PERTIME_PAY t4 on t4.MAIN_ID=t.id and t4.BALANCE_OR_DEFICIT_AMOUNT &lt; 0
			</when>
			<otherwise>
				left JOIN T_FIN_INS_PERTIME_PAY t4 on t4.MAIN_ID=t.id
			</otherwise>
		</choose>
		where 1=1
		<if test="cond.hospId != null and cond.hospId>0">
			and t.HOSP_ID = #{cond.hospId}
		</if>
		<if test="cond.insuranceType != null and cond.insuranceType>0">
			and t.INSURANCE_TYPE = #{cond.insuranceType}
		</if>
		<if test="cond.healthCommissionLevel != null and cond.healthCommissionLevel>0">
			and t.HEALTH_COMMISSION_LEVEL = #{cond.healthCommissionLevel}
		</if>
		<if test="cond.insuranceSettlementLevel != null and cond.insuranceSettlementLevel>0">
			and t.INSURANCE_SETTLEMENT_LEVEL = #{cond.insuranceSettlementLevel}
		</if>
		<choose>
			<when test="cond.receivableCollectionRateSelectValue != null and cond.receivableCollectionRateSelectValue.intValue() == 1 ">
				and t.RECEIVABLE_COLLECTION_RATE &gt;= 95
			</when>
			<when test="cond.receivableCollectionRateSelectValue != null and cond.receivableCollectionRateSelectValue.intValue() == 2 ">
				and t.RECEIVABLE_COLLECTION_RATE &gt;= 90 and t.RECEIVABLE_COLLECTION_RATE &lt; 95
			</when>
			<when test="cond.receivableCollectionRateSelectValue != null and cond.receivableCollectionRateSelectValue.intValue() == 3 ">
				and t.RECEIVABLE_COLLECTION_RATE &gt;= 80 and t.RECEIVABLE_COLLECTION_RATE &lt; 90
			</when>
			<when test="cond.receivableCollectionRateSelectValue != null and cond.receivableCollectionRateSelectValue.intValue() == 4 ">
				and t.RECEIVABLE_COLLECTION_RATE &gt;= 60 and t.RECEIVABLE_COLLECTION_RATE &lt; 80
			</when>
			<when test="cond.receivableCollectionRateSelectValue != null and cond.receivableCollectionRateSelectValue.intValue() == 5 ">
				and t.RECEIVABLE_COLLECTION_RATE &lt; 60
			</when>
			<otherwise>
				and 1=1
			</otherwise>
		</choose>
		<if test="cond.hospList != null and cond.hospList.size() > 0">
			and t.HOSP_ID in
			<foreach collection="cond.hospList" index="index" item="item"
					 separator="," open="(" close=")">
				#{item}
			</foreach>
		</if>
		<if test="cond.status!=null and cond.status.size() >0">
			and tm.status in
			<foreach collection="cond.status" item="item" separator="," open="(" close=")">
				#{item}
			</foreach>
		</if>
		<if test="(cond.year != null and cond.year != '') and  (cond.month == null or cond.month == '')">
			and t.create_date between
			to_date(concat(#{cond.year}, '-01-01 00:00:00'), 'YYYY-MM-DD hh24:mi:ss')
			and
			to_date(concat(#{cond.year}, '-12-31 23:59:59'), 'YYYY-MM-DD hh24:mi:ss')
		</if>
		<if test="(cond.year != null and cond.year != '') and  (cond.month != null and cond.month != '')">
			<if test="cond.monthMax.indexOf(cond.month) >= 0">
				and t.create_date between
				to_date(concat(concat(concat(#{cond.year},'-'),#{cond.month}), '-01 00:00:00'), 'YYYY-MM-DD hh24:mi:ss')
				and
				to_date(concat(concat(concat(#{cond.year},'-'),#{cond.month}), '-31 00:00:00'), 'YYYY-MM-DD hh24:mi:ss')
			</if>
			<if test="cond.monthMiddle.indexOf(cond.month) >= 0">
				and t.create_date between
				to_date(concat(concat(concat(#{cond.year},'-'),#{cond.month}), '-01 00:00:00'), 'YYYY-MM-DD hh24:mi:ss')
				and
				to_date(concat(concat(concat(#{cond.year},'-'),#{cond.month}), '-30 00:00:00'), 'YYYY-MM-DD hh24:mi:ss')
			</if>
			<if test="cond.monthMin.indexOf(cond.month) >= 0">
				and t.create_date between
				to_date(concat(concat(concat(#{cond.year},'-'),#{cond.month}), '-01 00:00:00'), 'YYYY-MM-DD hh24:mi:ss')
				and
				to_date(concat(concat(concat(#{cond.year},'-'),#{cond.month}), '-28 00:00:00'), 'YYYY-MM-DD hh24:mi:ss')
			</if>
		</if>
		<choose>
			<when test="cond.reportDateBegin != null and cond.reportDateEnd != ''">
				and t.create_date between
				to_date(concat(#{cond.reportDateBegin}, '
				00:00:00'), 'YYYY-MM-DD
				hh24:mi:ss') and
				to_date(concat(#{cond.reportDateEnd}, ' 23:59:59'),
				'YYYY-MM-DD
				hh24:mi:ss')
			</when>
			<otherwise>
				<if test="cond.reportDate != null and cond.reportDate != '' ">
					and t.create_date between
					to_date(concat(#{cond.reportDate}, '
					00:00:00'), 'YYYY-MM-DD
					hh24:mi:ss') and
					to_date(concat(#{cond.reportDate}, ' 23:59:59'),
					'YYYY-MM-DD
					hh24:mi:ss')
				</if>
			</otherwise>
		</choose>
		order by t.create_date desc
	</select>
</mapper>